<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use DB;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;
use DateTime;
use App\Models\beacon;
use App\Models\Status;
use Illuminate\Support\Facades\Http;

class BeaconsCron extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */

     
    public function refreshToken($id){
        # get helious from db
        $deets = DB::table('users')->where('eve_id', '94154296')->first();
        $this->info('Refreshing token for user '.$deets->name);

        // get the access token
        $response = \Http::asForm()->post('https://login.eveonline.com/v2/oauth/token', [
            'grant_type' => 'refresh_token',
            'refresh_token' => $deets->refreshToken,
            'client_id' => env('EVE_CLIENT_ID')
            ]);

        # show me what the response looks like
        $data = $response->json();

        # update the user's access token
        # update the user's refresh token
        $this->info('got new token, updating it...');

        $this->info($data['access_token']);

        $update = DB::table('users')->where('name', 'Helious Jin-Mei')->update([
            'accessToken' => $data['access_token'],
            'refreshToken' => $data['refresh_token'],
        ]);

        if($update){
            $this->call('get:beacons');
            return;
        }
    }

    public function GetIncusrions(){
        // Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
        $ch = curl_init();

        curl_setopt($ch, CURLOPT_URL, 'https://esi.evetech.net/latest/incursions/?datasource=tranquility');
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');


        $headers = array();
        $headers[] = 'Accept: application/json';
        $headers[] = 'Cache-Control: no-cache';
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

        $result = curl_exec($ch);
        if (curl_errno($ch)) {
            echo 'Error:' . curl_error($ch);
        }
        curl_close($ch);

        return $result;
    }

    public function CheckForIncusrion($system){
        $ch = curl_init();

        curl_setopt($ch, CURLOPT_URL, 'https://esi.evetech.net/latest/search/?categories=solar_system&datasource=tranquility&language=en&search='.$system.'&strict=true');
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
        
        
        $headers = array();
        $headers[] = 'Accept: application/json';
        $headers[] = 'Accept-Language: en';
        $headers[] = 'Cache-Control: no-cache';
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
        
        $result = curl_exec($ch);
        $result = json_decode($result, true);
        if (curl_errno($ch)) {
            echo 'Error:' . curl_error($ch);
        }
        curl_close($ch);
    
        $incursions = $this->GetIncusrions();
        $incursions = json_decode($incursions, true);

        $incursionsLength = count($incursions);
        for($i = 0; $i < $incursionsLength; $i++){
            foreach($incursions[$i]['infested_solar_systems'] as $infestedSystem){
                if($infestedSystem == $result['solar_system'][0]){
                    $this->info('Found incursion in '.$system);
                    return true;
                }
            }
        }

        return false;
    }

    protected $signature = 'get:beacons';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Command description';

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return int
     */
    public function handle()
    {
        $eve_data = DB::table('users')->where('eve_id', '94154296')->first();

        // check if eve data is empty
        if(empty($eve_data)){ $this->info("No data found"); return; }

        try {
            // check if user has station_manager role
            $ch = curl_init();
            curl_setopt($ch, CURLOPT_URL, 'https://esi.evetech.net/latest/characters/'.$eve_data->eve_id.'/roles/?datasource=tranquility');
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');


            $headers = array();
            $headers[] = 'Accept: application/json';
            $headers[] = 'Authorization: Bearer '.$eve_data->accessToken.'';
            $headers[] = 'Cache-Control: no-cache';
            curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
            $result = curl_exec($ch);
            if (strpos($result, 'token is expired') !== false) {
                $this->info("Token expired, refreshing token");
                $this->refreshToken($eve_data->id);
            }

            // get corporation structures
            $ch = curl_init();
            curl_setopt($ch, CURLOPT_URL, 'https://esi.evetech.net/latest/corporations/2014367342/structures/?datasource=tranquility&language=en&page=1');
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');


            $headers = array();
            $headers[] = 'Accept: application/json';
            $headers[] = 'Accept-Language: en';
            $headers[] = 'Authorization: Bearer '.$eve_data->accessToken.'';        
            $headers[] = 'Cache-Control: no-cache';
            curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
            // check if curl has error
            $result = curl_exec($ch);
            $structures = json_decode($result, true);

            curl_close($ch);

            foreach($structures as $strcture){
                if($strcture['type_id'] !== 35840){
                    continue;
                }
                // check if fuel_expires is 3 days from now
			    $dayy = $strcture['fuel_expires'] ?? null;
                $fuel_expires = new DateTime($dayy);
                $now = new DateTime();
                $diff = $fuel_expires->diff($now);

                $ch = curl_init();
                curl_setopt($ch, CURLOPT_URL, 'https://esi.evetech.net/latest/universe/systems/'.$strcture['system_id'].'/?datasource=tranquility&language=en');
                curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
                curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');
                curl_setopt($ch, CURLOPT_HTTPHEADER, [
                    'accept' => 'application/json',
                    'Accept-Language' => 'en',
                    'Cache-Control' => 'no-cache',
                ]);

                $sys = curl_exec($ch);
                $sysID = json_decode($sys, true);

                $ch2 = curl_init();
                curl_setopt($ch2, CURLOPT_URL, 'https://esi.evetech.net/latest/universe/constellations/'.$sysID['constellation_id'].'/?datasource=tranquility&language=en');
                curl_setopt($ch2, CURLOPT_RETURNTRANSFER, true);
                curl_setopt($ch2, CURLOPT_CUSTOMREQUEST, 'GET');
                curl_setopt($ch2, CURLOPT_HTTPHEADER, [
                    'accept' => 'application/json',
                    'Accept-Language' => 'en',
                    'Cache-Control' => 'no-cache',
                ]);

                $constID = curl_exec($ch2);
                $const = json_decode($constID, true);

                // make $diff->days a 2 int number if less than 10
                $days = $diff->days;
                if($days < 10){
                    $days = '0'.$days;
                }
                // G-KCFT - HORDE MANGO BEACON
                $name = explode(" - ", $strcture['name']);

                // remove everything before "- "
                $system = explode("- ", $name[1]);

                $this->info("Checking ".$name[0]);
                $incMaybe = $this->CheckForIncusrion($name[0]);

                # check if fuel_expires is null
                if($incMaybe == false && $dayy == null){
                    $beacon = beacon::updateOrCreate(
                        ['structure_id' => $strcture['structure_id']],
                        ['system' => $name[0], 'name' => $name[1], 'constellation' => $const['name'], 'expires_in' => '0FFLINE']
                    );
                } elseif($incMaybe == true && $dayy == null){
                    $beacon = beacon::updateOrCreate(
                        ['structure_id' => $strcture['structure_id']],
                        ['system' => $name[0], 'name' => $name[1], 'constellation' => $const['name'], 'expires_in' => '0FFLINE **[INCURSION]**']
                    );
                } else {
                    $beacon = beacon::updateOrCreate(
                        ['structure_id' => $strcture['structure_id']],
                        ['system' => $name[0], 'name' => $name[1], 'constellation' => $const['name'], 'expires_in' => $days .' Days Left']
                    );
                }
                if($beacon){
                    $this->info("Beacon ".$name[0]." updated");
                } else {
                    $this->info("Beacon ".$name[0]." not updated");
                }
            }

            // update status model to true
            $status = status::updateOrCreate(
                ['id' => 1],
                ['status' => true]
            );


            $this->info("Completed updating beacon data");

        } catch (\Exception $e) {

            // update status model to true
            $status = status::updateOrCreate(
                ['id' => 1],
                ['status' => false]
            );
            $this->info($e->getMessage().' on line '.$e->getLine());
            $this->call('get:beacons');
        }
    }
}
